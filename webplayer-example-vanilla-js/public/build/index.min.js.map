{
  "version": 3,
  "sources": ["index.js"],
  "sourcesContent": ["// The public callback events\nexport const allowedEvents = {\n    success: 1,\n    error: 1,\n    someOtherEvent: 1,\n    somePublicMethodResponse: 1,\n};\n// The public API\nexport const allowedMethods = {\n    somePublicMethod: 1,\n};\nclass CorelliumWebplayer {\n    constructor({ token, domain, deviceId, containerId, }) {\n        this._token = token;\n        this._appendedChild = null;\n        this._domain = domain;\n        this._deviceId = deviceId;\n        this._containerId = containerId;\n        this._connection = null;\n        this._remoteHandle = null;\n        this._localHandle = null;\n        // Client-registered listeners using the `.on` method.\n        // Only 1 callback per listener type allowed for now.\n        this._listeners = {};\n        this.setupPostMe()\n            .then(() => {\n            const childFrame = this.setupIframe();\n            if (childFrame !== undefined && this._appendedChild && window.PostMe) {\n                this.setupCommunication(this._appendedChild, window.PostMe);\n            }\n        })\n            .catch(() => {\n            console.error('Could not set up communication with the Corellium iframe.');\n            throw new Error('Could not set up communication with the Corellium iframe.');\n        });\n    }\n    async setupPostMe() {\n        return new Promise((resolve, reject) => {\n            // @ts-ignore\n            import('https://unpkg.com/post-me/dist/index.js')\n                .then(() => {\n                resolve(true);\n            })\n                .catch((err) => {\n                console.error('Error setting up post-me.');\n                reject();\n            });\n        });\n    }\n    setupIframe() {\n        const src = `${this._domain}/web-player/login`;\n        const childContainer = document.getElementById(this._containerId);\n        const childFrame = document.createElement('iframe');\n        childFrame.src = src;\n        childFrame.name = 'child';\n        childFrame.title = 'Corellium Web Player';\n        childFrame.width = '100%';\n        childFrame.style.border = 'none';\n        childFrame.id = 'web-player';\n        childFrame.style.display = 'none';\n        childFrame.style.minHeight = '800px';\n        childFrame.style.maxHeight = '100%';\n        childFrame.style.margin = '0';\n        childFrame.allow = 'camera;microphone';\n        if (childContainer) {\n            this._appendedChild = childContainer.appendChild(childFrame);\n            return this._appendedChild;\n        }\n        throw new Error('Could not append child to container.');\n    }\n    setupCommunication(appendChild, postMe) {\n        appendChild.onload = () => {\n            if (!appendChild.contentWindow) {\n                throw new Error('Could not get contentWindow from iframe.');\n            }\n            const WindowMessenger = postMe.WindowMessenger;\n            const ParentHandshake = postMe.ParentHandshake;\n            const messenger = new WindowMessenger({\n                localWindow: window,\n                remoteWindow: appendChild.contentWindow,\n                remoteOrigin: this._domain,\n            });\n            ParentHandshake(messenger, {}, 10, 5000)\n                .then((connection) => {\n                this._connection = connection;\n                this._remoteHandle = connection.remoteHandle();\n                this._localHandle = connection.localHandle();\n                this._localHandle.emit('connect', {\n                    token: this._token,\n                    deviceId: this._deviceId,\n                });\n                this._remoteHandle.addEventListener('message', (message) => {\n                    if (message.status === 'success') {\n                        setTimeout(() => {\n                            const loadingElement = document.getElementById('corellium-loading');\n                            const webPlayerElement = document.getElementById('web-player');\n                            if (loadingElement) {\n                                loadingElement.style.display = 'none';\n                            }\n                            if (!webPlayerElement) {\n                                throw new Error('Could not find web-player element.');\n                            }\n                            webPlayerElement.style.display = 'block';\n                            this._emit(message.status, message);\n                        }, 2000);\n                    }\n                    else if (message.status === 'error') {\n                        const errorElement = document.getElementById('corellium-error');\n                        if (errorElement) {\n                            errorElement.style.display = 'block';\n                        }\n                        this._emit(message.status, message);\n                        throw new Error(message);\n                    }\n                    else {\n                        // emit this message to the client\n                        this._emit(message.status, message);\n                    }\n                });\n                return {\n                    status: 200,\n                    message: 'success',\n                };\n            })\n                .catch((err) => {\n                this._emit('error', err);\n                throw new Error(err);\n            });\n        };\n    }\n    // this method allows the client to register a listener\n    on(eventName, callback) {\n        if (!allowedEvents[eventName]) {\n            throw new Error(`${eventName} is not allowed`);\n        }\n        this._listeners[eventName] = callback;\n    }\n    // this function is used by the eventListener to execute client code from the _listeners\n    _emit(eventName, data) {\n        this._listeners?.[eventName](data);\n    }\n    // this code allows the client to execute a public method in the iframe\n    exec(methodName, data) {\n        if (!allowedMethods[methodName]) {\n            throw new Error(`${methodName} is not allowed`);\n        }\n        this._remoteHandle?.call(methodName, data);\n        // the client must add an event listener using the `on` function to get a response\n    }\n}\nexport default CorelliumWebplayer;\n"],
  "mappings": "aACO,aAAM,cAAgB,CACzB,QAAS,EACT,MAAO,EACP,eAAgB,EAChB,yBAA0B,CAC9B,EAEa,eAAiB,CAC1B,iBAAkB,CACtB,EACA,MAAMA,CAAmB,CACrB,YAAY,CAAE,MAAAC,EAAO,OAAAC,EAAQ,SAAAC,EAAU,YAAAC,CAAa,EAAG,CACnD,KAAK,OAASH,EACd,KAAK,eAAiB,KACtB,KAAK,QAAUC,EACf,KAAK,UAAYC,EACjB,KAAK,aAAeC,EACpB,KAAK,YAAc,KACnB,KAAK,cAAgB,KACrB,KAAK,aAAe,KAGpB,KAAK,WAAa,CAAC,EACnB,KAAK,YAAY,EACZ,KAAK,IAAM,CACO,KAAK,YAAY,IACjB,QAAa,KAAK,gBAAkB,OAAO,QAC1D,KAAK,mBAAmB,KAAK,eAAgB,OAAO,MAAM,CAElE,CAAC,EACI,MAAM,IAAM,CACb,cAAQ,MAAM,2DAA2D,EACnE,IAAI,MAAM,2DAA2D,CAC/E,CAAC,CACL,CACA,MAAM,aAAc,CAChB,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CAEpC,OAAO,2CACF,KAAK,IAAM,CACZD,EAAQ,EAAI,CAChB,CAAC,EACI,MAAOE,GAAQ,CAChB,QAAQ,MAAM,2BAA2B,EACzCD,EAAO,CACX,CAAC,CACL,CAAC,CACL,CACA,aAAc,CACV,MAAME,EAAM,GAAG,KAAK,2BACdC,EAAiB,SAAS,eAAe,KAAK,YAAY,EAC1DC,EAAa,SAAS,cAAc,QAAQ,EAYlD,GAXAA,EAAW,IAAMF,EACjBE,EAAW,KAAO,QAClBA,EAAW,MAAQ,uBACnBA,EAAW,MAAQ,OACnBA,EAAW,MAAM,OAAS,OAC1BA,EAAW,GAAK,aAChBA,EAAW,MAAM,QAAU,OAC3BA,EAAW,MAAM,UAAY,QAC7BA,EAAW,MAAM,UAAY,OAC7BA,EAAW,MAAM,OAAS,IAC1BA,EAAW,MAAQ,oBACfD,EACA,YAAK,eAAiBA,EAAe,YAAYC,CAAU,EACpD,KAAK,eAEhB,MAAM,IAAI,MAAM,sCAAsC,CAC1D,CACA,mBAAmBC,EAAaC,EAAQ,CACpCD,EAAY,OAAS,IAAM,CACvB,GAAI,CAACA,EAAY,cACb,MAAM,IAAI,MAAM,0CAA0C,EAE9D,MAAME,EAAkBD,EAAO,gBACzBE,EAAkBF,EAAO,gBACzBG,EAAY,IAAIF,EAAgB,CAClC,YAAa,OACb,aAAcF,EAAY,cAC1B,aAAc,KAAK,OACvB,CAAC,EACDG,EAAgBC,EAAW,CAAC,EAAG,GAAI,GAAI,EAClC,KAAMC,IACP,KAAK,YAAcA,EACnB,KAAK,cAAgBA,EAAW,aAAa,EAC7C,KAAK,aAAeA,EAAW,YAAY,EAC3C,KAAK,aAAa,KAAK,UAAW,CAC9B,MAAO,KAAK,OACZ,SAAU,KAAK,SACnB,CAAC,EACD,KAAK,cAAc,iBAAiB,UAAYC,GAAY,CACxD,GAAIA,EAAQ,SAAW,UACnB,WAAW,IAAM,CACb,MAAMC,EAAiB,SAAS,eAAe,mBAAmB,EAC5DC,EAAmB,SAAS,eAAe,YAAY,EAI7D,GAHID,IACAA,EAAe,MAAM,QAAU,QAE/B,CAACC,EACD,MAAM,IAAI,MAAM,oCAAoC,EAExDA,EAAiB,MAAM,QAAU,QACjC,KAAK,MAAMF,EAAQ,OAAQA,CAAO,CACtC,EAAG,GAAI,UAEFA,EAAQ,SAAW,QAAS,CACjC,MAAMG,EAAe,SAAS,eAAe,iBAAiB,EAC9D,MAAIA,IACAA,EAAa,MAAM,QAAU,SAEjC,KAAK,MAAMH,EAAQ,OAAQA,CAAO,EAC5B,IAAI,MAAMA,CAAO,CAC3B,MAGI,KAAK,MAAMA,EAAQ,OAAQA,CAAO,CAE1C,CAAC,EACM,CACH,OAAQ,IACR,QAAS,SACb,EACH,EACI,MAAOV,GAAQ,CAChB,WAAK,MAAM,QAASA,CAAG,EACjB,IAAI,MAAMA,CAAG,CACvB,CAAC,CACL,CACJ,CAEA,GAAGc,EAAWC,EAAU,CACpB,GAAI,CAAC,cAAcD,GACf,MAAM,IAAI,MAAM,GAAGA,kBAA0B,EAEjD,KAAK,WAAWA,GAAaC,CACjC,CAEA,MAAMD,EAAWE,EAAM,CACnB,KAAK,aAAaF,GAAWE,CAAI,CACrC,CAEA,KAAKC,EAAYD,EAAM,CACnB,GAAI,CAAC,eAAeC,GAChB,MAAM,IAAI,MAAM,GAAGA,kBAA2B,EAElD,KAAK,eAAe,KAAKA,EAAYD,CAAI,CAE7C,CACJ,CACA,eAAevB",
  "names": ["CorelliumWebplayer", "token", "domain", "deviceId", "containerId", "resolve", "reject", "err", "src", "childContainer", "childFrame", "appendChild", "postMe", "WindowMessenger", "ParentHandshake", "messenger", "connection", "message", "loadingElement", "webPlayerElement", "errorElement", "eventName", "callback", "data", "methodName"]
}
